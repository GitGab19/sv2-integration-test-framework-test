name: Integration Test with Custom Branch
on:
  workflow_call:
    inputs:
      repo_name:
        description: 'Repository name (sv2-core-test, sv2-pool-apps-test, or sv2-miner-apps-test)'
        required: true
        type: string
      branch_name:
        description: 'Branch name to test'
        required: true
        type: string
      repo_url:
        description: 'Repository URL (for handling forks)'
        required: true
        type: string

jobs:
  integration-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout integration test framework
        uses: actions/checkout@v4
        with:
          repository: GitGab19/sv2-integration-test-framework-test
        
      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          override: true
          
      - name: Cache cargo registry
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-integration-${{ hashFiles('**/Cargo.lock') }}
          
      - name: Update dependency for testing
        run: |
          echo "🔧 Updating ${{ inputs.repo_name }} to use branch ${{ inputs.branch_name }}"
          
          # Create backup
          cp Cargo.toml Cargo.toml.backup
          
          # Convert repo_url to full GitHub URL if needed
          if [[ "${{ inputs.repo_url }}" == *"github.com"* ]]; then
            REPO_URL="${{ inputs.repo_url }}"
          else
            REPO_URL="https://github.com/${{ inputs.repo_url }}"
          fi
          echo "📍 Using repository URL: $REPO_URL"
          echo "📋 Original Cargo.toml dependencies:"
          grep -A 1 -B 1 "git.*github.com" Cargo.toml || echo "No git dependencies found"
          
          # Set variables for use in sed commands
          BRANCH_NAME="${{ inputs.branch_name }}"
          
          # Update dependencies based on the repository being tested
          case "${{ inputs.repo_name }}" in
            "sv2-core-test")
              # Update all sv2-core-test dependencies
              sed -i "s|stratum-common = { git = \"https://github.com/GitGab19/sv2-core-test\", branch = \"main\"|stratum-common = { git = \"$REPO_URL\", branch = \"$BRANCH_NAME\"|g" Cargo.toml
              sed -i "s|sv1_api = { git = \"https://github.com/GitGab19/sv2-core-test\", branch = \"main\"|sv1_api = { git = \"$REPO_URL\", branch = \"$BRANCH_NAME\"|g" Cargo.toml
              sed -i "s|key-utils = { git = \"https://github.com/GitGab19/sv2-core-test\", branch = \"main\"|key-utils = { git = \"$REPO_URL\", branch = \"$BRANCH_NAME\"|g" Cargo.toml
              sed -i "s|config-helpers = { git = \"https://github.com/GitGab19/sv2-core-test\", branch = \"main\"|config-helpers = { git = \"$REPO_URL\", branch = \"$BRANCH_NAME\"|g" Cargo.toml
              
              # Add patch section to override all git dependencies with the same branch
              echo "🔧 Adding patch section to override git dependencies..."
              
              # Remove any existing patch section first
              sed -i '/^# Override git dependencies/,/^$/d' Cargo.toml
              sed -i '/^\[patch\."https:\/\/github\.com\/GitGab19\/sv2-core-test"\]/,/^$/d' Cargo.toml
              
              # Add the patch section at the end of the file
              cat >> Cargo.toml << EOF

              # Override git dependencies to ensure all sv2-core-test crates use the same branch
              [patch."https://github.com/GitGab19/sv2-core-test"]
              roles_logic_sv2 = { git = "${REPO_URL}", branch = "${BRANCH_NAME}" }
              network_helpers_sv2 = { git = "${REPO_URL}", branch = "${BRANCH_NAME}" }
              binary_sv2 = { git = "${REPO_URL}", branch = "${BRANCH_NAME}" }
              binary_codec_sv2 = { git = "${REPO_URL}", branch = "${BRANCH_NAME}" }
              derive_codec_sv2 = { git = "${REPO_URL}", branch = "${BRANCH_NAME}" }
              noise_sv2 = { git = "${REPO_URL}", branch = "${BRANCH_NAME}" }
              framing_sv2 = { git = "${REPO_URL}", branch = "${BRANCH_NAME}" }
              codec_sv2 = { git = "${REPO_URL}", branch = "${BRANCH_NAME}" }
              common_messages_sv2 = { git = "${REPO_URL}", branch = "${BRANCH_NAME}" }
              template_distribution_sv2 = { git = "${REPO_URL}", branch = "${BRANCH_NAME}" }
              mining_sv2 = { git = "${REPO_URL}", branch = "${BRANCH_NAME}" }
              job_declaration_sv2 = { git = "${REPO_URL}", branch = "${BRANCH_NAME}" }
              channels_sv2 = { git = "${REPO_URL}", branch = "${BRANCH_NAME}" }
              parsers_sv2 = { git = "${REPO_URL}", branch = "${BRANCH_NAME}" }
              buffer_sv2 = { git = "${REPO_URL}", branch = "${BRANCH_NAME}" }
              error_handling = { git = "${REPO_URL}", branch = "${BRANCH_NAME}" }
              rpc_sv2 = { git = "${REPO_URL}", branch = "${BRANCH_NAME}" }
              EOF
              
              echo "✅ Updated Cargo.toml with patch section for sv2-core-test dependencies"
              ;;
            "sv2-pool-apps-test")
              # Update all sv2-pool-apps-test dependencies
              sed -i "s|jd_server = { git = \"https://github.com/GitGab19/sv2-pool-apps-test\", branch = \"main\"|jd_server = { git = \"$REPO_URL\", branch = \"$BRANCH_NAME\"|g" Cargo.toml
              sed -i "s|pool_sv2 = { git = \"https://github.com/GitGab19/sv2-pool-apps-test\", branch = \"main\"|pool_sv2 = { git = \"$REPO_URL\", branch = \"$BRANCH_NAME\"|g" Cargo.toml
              ;;
            "sv2-miner-apps-test")
              # Update all sv2-miner-apps-test dependencies
              sed -i "s|jd_client = { git = \"https://github.com/GitGab19/sv2-miner-apps-test\", branch = \"main\"|jd_client = { git = \"$REPO_URL\", branch = \"$BRANCH_NAME\"|g" Cargo.toml
              sed -i "s|translator_sv2 = { git = \"https://github.com/GitGab19/sv2-miner-apps-test\", branch = \"main\"|translator_sv2 = { git = \"$REPO_URL\", branch = \"$BRANCH_NAME\"|g" Cargo.toml
              sed -i "s|mining_device = { git = \"https://github.com/GitGab19/sv2-miner-apps-test\", branch = \"main\"|mining_device = { git = \"$REPO_URL\", branch = \"$BRANCH_NAME\"|g" Cargo.toml
              sed -i "s|mining_device_sv1 = { git = \"https://github.com/GitGab19/sv2-miner-apps-test\", branch = \"main\"|mining_device_sv1 = { git = \"$REPO_URL\", branch = \"$BRANCH_NAME\"|g" Cargo.toml
              ;;
          esac
          
          echo "✅ Updated Cargo.toml for testing"
          echo "📝 Final Cargo.toml dependencies:"
          grep -A 1 -B 1 "git.*github.com" Cargo.toml || echo "No git dependencies found"
          
      - name: Run integration tests
        run: |
          echo "🏃 Running integration tests with updated dependencies..."
          echo "📋 Current working directory: $(pwd)"
          echo "📁 Contents of current directory:"
          ls -la
          echo "📄 Checking if this is the integration test framework:"
          ls -la tests/ lib/
          echo "📝 Current Cargo.toml dependencies:"
          grep -A 5 -B 5 "sv2-core-test\|sv2-pool-apps-test\|sv2-miner-apps-test" Cargo.toml || echo "No git dependencies found"
          echo "🧪 Running cargo test with sv1 features..."
          cargo test --features sv1 --verbose
          
      - name: Cleanup
        if: always()
        run: |
          echo "🧹 Restoring original Cargo.toml..."
          if [ -f Cargo.toml.backup ]; then
            mv Cargo.toml.backup Cargo.toml
          fi