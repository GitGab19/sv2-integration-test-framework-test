name: Integration Test with Custom Branch
on:
  workflow_call:
    inputs:
      repo_name:
        description: 'Repository name (sv2-core-test, sv2-pool-apps-test, or sv2-miner-apps-test)'
        required: true
        type: string
      branch_name:
        description: 'Branch name to test'
        required: true
        type: string
      repo_url:
        description: 'Repository URL (for handling forks)'
        required: true
        type: string
      repo_slug:
        description: 'Repository slug (e.g., GitGabPoliTo19/sv2-core-test)'
        required: true
        type: string

jobs:
  integration-test:
    runs-on: ubuntu-latest
    steps:
      - name: Derive repo slug from URL
        id: derive_slug
        run: |
          REPO_URL="${{ inputs.repo_url }}"
          REPO_SLUG=$(echo "$REPO_URL" | sed -E 's#(https://github.com/|git@github.com:|.git$)##g')
          echo "slug=$REPO_SLUG" >> $GITHUB_OUTPUT

      - name: Checkout repository being tested
        uses: actions/checkout@v4
        with:
          repository: ${{ steps.derive_slug.outputs.slug }}
          ref: ${{ inputs.branch_name }}
          path: repo-under-test
          
      - name: Checkout integration test framework
        uses: actions/checkout@v4
        with:
          repository: GitGab19/sv2-integration-test-framework-test
          path: integration-tests
        
      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          override: true
          
      - name: Cache cargo registry
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-integration-${{ hashFiles('**/Cargo.lock') }}
          
      - name: Update dependency for testing
        run: |
          echo "🔧 Updating ${{ inputs.repo_name }} to use branch ${{ inputs.branch_name }}"
          
          # Change to integration tests directory
          cd integration-tests
          
          # Create backup
          cp Cargo.toml Cargo.toml.backup
          
          # Convert repo_url to full GitHub URL if needed
          if [[ "${{ inputs.repo_url }}" == *"github.com"* ]]; then
            REPO_URL="${{ inputs.repo_url }}"
          else
            REPO_URL="https://github.com/${{ inputs.repo_url }}"
          fi
          echo "📍 Using repository URL: $REPO_URL"
          echo "📋 Original Cargo.toml dependencies:"
          grep -A 1 -B 1 "git.*github.com" Cargo.toml || echo "No git dependencies found"
          
          # Set variables for use in sed commands
          BRANCH_NAME="${{ inputs.branch_name }}"
          
          # Update dependencies based on the repository being tested
          case "${{ inputs.repo_name }}" in
            "sv2-core-test")
              # Update all sv2-core-test dependencies
              sed -i "s|stratum-common = { git = \"https://github.com/GitGab19/sv2-core-test\", branch = \"main\"|stratum-common = { git = \"$REPO_URL\", branch = \"$BRANCH_NAME\"|g" Cargo.toml
              sed -i "s|sv1_api = { git = \"https://github.com/GitGab19/sv2-core-test\", branch = \"main\"|sv1_api = { git = \"$REPO_URL\", branch = \"$BRANCH_NAME\"|g" Cargo.toml
              sed -i "s|key-utils = { git = \"https://github.com/GitGab19/sv2-core-test\", branch = \"main\"|key-utils = { git = \"$REPO_URL\", branch = \"$BRANCH_NAME\"|g" Cargo.toml
              sed -i "s|config-helpers = { git = \"https://github.com/GitGab19/sv2-core-test\", branch = \"main\"|config-helpers = { git = \"$REPO_URL\", branch = \"$BRANCH_NAME\"|g" Cargo.toml
              
              # Find the actual sv2-core-test directory
              SV2_CORE_DIR=""
              # The repository being tested should be at ../repo-under-test
              if [ -d "../repo-under-test" ] && [ -d "../repo-under-test/common" ] && [ -d "../repo-under-test/sv1" ] && [ -d "../repo-under-test/sv2" ]; then
                SV2_CORE_DIR="../repo-under-test"
              fi
              
              if [ -z "$SV2_CORE_DIR" ]; then
                echo "❌ Could not find sv2-core-test directory structure at ../repo-under-test"
                echo "📁 Available directories in ../:"
                ls -la ../
                echo "📁 Contents of ../repo-under-test (if it exists):"
                ls -la ../repo-under-test/ || echo "Directory does not exist"
                exit 1
              fi
              
              echo "📍 Found sv2-core-test at: $SV2_CORE_DIR"

              # Create .cargo/config.toml with [patch] section to override git dependencies with local paths
              echo "🔧 Creating .cargo/config.toml with [patch] section..."
              mkdir -p .cargo
              cat > .cargo/config.toml <<EOL
[patch.\"$REPO_URL\"]
stratum-common = { path = \"$SV2_CORE_DIR/common\" }
sv1_api = { path = \"$SV2_CORE_DIR/sv1\" }
key-utils = { path = \"$SV2_CORE_DIR/utils/key-utils\" }
config-helpers = { path = \"$SV2_CORE_DIR/roles-utils/config-helpers\" }
roles_logic_sv2 = { path = \"$SV2_CORE_DIR/sv2/roles-logic-sv2\" }
network_helpers_sv2 = { path = \"$SV2_CORE_DIR/roles-utils/network-helpers\" }
binary_sv2 = { path = \"$SV2_CORE_DIR/sv2/binary-sv2\" }
binary_codec_sv2 = { path = \"$SV2_CORE_DIR/sv2/binary-sv2/codec\" }
derive_codec_sv2 = { path = \"$SV2_CORE_DIR/sv2/binary-sv2/derive_codec\" }
noise_sv2 = { path = \"$SV2_CORE_DIR/sv2/noise-sv2\" }
framing_sv2 = { path = \"$SV2_CORE_DIR/sv2/framing-sv2\" }
codec_sv2 = { path = \"$SV2_CORE_DIR/sv2/codec-sv2\" }
common_messages_sv2 = { path = \"$SV2_CORE_DIR/sv2/subprotocols/common-messages\" }
template_distribution_sv2 = { path = \"$SV2_CORE_DIR/sv2/subprotocols/template-distribution\" }
mining_sv2 = { path = \"$SV2_CORE_DIR/sv2/subprotocols/mining\" }
job_declaration_sv2 = { path = \"$SV2_CORE_DIR/sv2/subprotocols/job-declaration\" }
channels_sv2 = { path = \"$SV2_CORE_DIR/sv2/channels-sv2\" }
parsers_sv2 = { path = \"$SV2_CORE_DIR/sv2/parsers-sv2\" }
buffer_sv2 = { path = \"$SV2_CORE_DIR/utils/buffer\" }
error_handling = { path = \"$SV2_CORE_DIR/utils/error-handling\" }
rpc_sv2 = { path = \"$SV2_CORE_DIR/roles-utils/rpc\" }
EOL
              
              # Patch direct dependencies in Cargo.toml to use local paths
              sed -i "s|stratum-common = { git = \"https://github.com/GitGab19/sv2-core-test\", branch = \"main\" }|stratum-common = { path = \"$SV2_CORE_DIR/common\" }|g" Cargo.toml
              sed -i "s|sv1_api = { git = \"https://github.com/GitGab19/sv2-core-test\", branch = \"main\" }|sv1_api = { path = \"$SV2_CORE_DIR/sv1\" }|g" Cargo.toml
              sed -i "s|key-utils = { git = \"https://github.com/GitGab19/sv2-core-test\", branch = \"main\" }|key-utils = { path = \"$SV2_CORE_DIR/utils/key-utils\" }|g" Cargo.toml
              sed -i "s|config-helpers = { git = \"https://github.com/GitGab19/sv2-core-test\", branch = \"main\" }|config-helpers = { path = \"$SV2_CORE_DIR/roles-utils/config-helpers\" }|g" Cargo.toml
              ;;
            "sv2-pool-apps-test")
              # Update all sv2-pool-apps-test dependencies
              sed -i "s|jd_server = { git = \"https://github.com/GitGab19/sv2-pool-apps-test\", branch = \"main\"|jd_server = { git = \"$REPO_URL\", branch = \"$BRANCH_NAME\"|g" Cargo.toml
              sed -i "s|pool_sv2 = { git = \"https://github.com/GitGab19/sv2-pool-apps-test\", branch = \"main\"|pool_sv2 = { git = \"$REPO_URL\", branch = \"$BRANCH_NAME\"|g" Cargo.toml
              echo "✅ Updated Cargo.toml with sv2-pool-apps-test dependencies"
              ;;
            "sv2-miner-apps-test")
              # Update all sv2-miner-apps-test dependencies
              sed -i "s|jd_client = { git = \"https://github.com/GitGab19/sv2-miner-apps-test\", branch = \"main\"|jd_client = { git = \"$REPO_URL\", branch = \"$BRANCH_NAME\"|g" Cargo.toml
              sed -i "s|translator_sv2 = { git = \"https://github.com/GitGab19/sv2-miner-apps-test\", branch = \"main\"|translator_sv2 = { git = \"$REPO_URL\", branch = \"$BRANCH_NAME\"|g" Cargo.toml
              sed -i "s|mining_device = { git = \"https://github.com/GitGab19/sv2-miner-apps-test\", branch = \"main\"|mining_device = { git = \"$REPO_URL\", branch = \"$BRANCH_NAME\"|g" Cargo.toml
              sed -i "s|mining_device_sv1 = { git = \"https://github.com/GitGab19/sv2-miner-apps-test\", branch = \"main\"|mining_device_sv1 = { git = \"$REPO_URL\", branch = \"$BRANCH_NAME\"|g" Cargo.toml
              echo "✅ Updated Cargo.toml with sv2-miner-apps-test dependencies"
              ;;
            *)
              echo "❌ Unknown repository: ${{ inputs.repo_name }}"
              exit 1
              ;;
          esac
          
          echo "✅ Updated Cargo.toml for testing"
          echo "📝 Final Cargo.toml dependencies:"
          grep -A 1 -B 1 "git.*github.com" Cargo.toml || echo "No git dependencies found"
          
      - name: Run integration tests
        run: |
          echo "🏃 Running integration tests with updated dependencies..."
          
          # Change to integration tests directory
          cd integration-tests
          
          echo "📋 Current working directory: $(pwd)"
          echo "📁 Contents of current directory:"
          ls -la
          echo "📁 Contents of parent directory:"
          ls -la ../
          echo "📄 Checking if this is the integration test framework:"
          ls -la tests/ lib/
          echo "📝 Current Cargo.toml dependencies:"
          grep -A 5 -B 5 "sv2-core-test\|sv2-pool-apps-test\|sv2-miner-apps-test" Cargo.toml || echo "No git dependencies found"
          echo "🧪 Running cargo test with sv1 features..."
          cargo test --features sv1 --verbose
          
      - name: Cleanup
        if: always()
        run: |
          echo "🧹 Restoring original Cargo.toml..."
          cd integration-tests
          if [ -f Cargo.toml.backup ]; then
            mv Cargo.toml.backup Cargo.toml
          fi