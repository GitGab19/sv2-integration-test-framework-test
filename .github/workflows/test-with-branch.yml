name: Integration Test with Custom Branch

on:
  workflow_call:
    inputs:
      repo_name:
        description: 'Repository name (sv2-core-test, sv2-pool-apps-test, or sv2-miner-apps-test)'
        required: true
        type: string
      branch_name:
        description: 'Branch name to test'
        required: true
        type: string
      repo_url:
        description: 'Repository URL (for handling forks)'
        required: true
        type: string
      repo_slug:
        description: 'Repository slug (e.g., GitGab19/sv2-core-test)'
        required: true
        type: string
      pr_number:
        description: 'PR number (optional, for better logging)'
        required: false
        type: string
        default: ''

jobs:
  integration-test:
    runs-on: ubuntu-latest
    timeout-minutes: 45
    
    steps:
      - name: Log test parameters
        run: |
          echo "üß™ Starting integration tests for PR"
          echo "üì¶ Repository: ${{ inputs.repo_name }}"
          echo "üåø Branch: ${{ inputs.branch_name }}"
          echo "üîó Repository URL: ${{ inputs.repo_url }}"
          echo "üìä Repository Slug: ${{ inputs.repo_slug }}"
          if [ -n "${{ inputs.pr_number }}" ]; then
            echo "üî¢ PR Number: #${{ inputs.pr_number }}"
          fi
          echo "‚è∞ Started at: $(date)"

      - name: Derive repo slug from URL
        id: derive_slug
        run: |
          REPO_URL="${{ inputs.repo_url }}"
          REPO_SLUG=$(echo "$REPO_URL" | sed -E 's#(https://github.com/|git@github.com:|.git$)##g')
          echo "slug=$REPO_SLUG" >> $GITHUB_OUTPUT
          echo "üìç Derived repository slug: $REPO_SLUG"

      - name: Checkout repository being tested
        uses: actions/checkout@v4
        with:
          repository: ${{ steps.derive_slug.outputs.slug }}
          ref: ${{ inputs.branch_name }}
          path: repo-under-test
          fetch-depth: 1
          
      - name: Verify checkout of repository under test
        run: |
          echo "‚úÖ Repository under test checked out successfully"
          echo "üìÅ Contents of repo-under-test:"
          ls -la repo-under-test/
          echo "üìÑ Repository info:"
          cd repo-under-test
          git log --oneline -5 || echo "No git history available"
          
      - name: Checkout integration test framework
        uses: actions/checkout@v4
        with:
          repository: GitGab19/sv2-integration-test-framework-test
          path: integration-tests
          fetch-depth: 1
        
      - name: Verify integration test framework checkout
        run: |
          echo "‚úÖ Integration test framework checked out successfully"
          echo "üìÅ Contents of integration-tests:"
          ls -la integration-tests/
          echo "üß™ Available tests:"
          ls -la integration-tests/tests/
          
      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          override: true
          components: rustfmt, clippy
          
      - name: Cache cargo registry and dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            integration-tests/target
            repo-under-test/target
          key: ${{ runner.os }}-cargo-integration-${{ inputs.repo_name }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-integration-${{ inputs.repo_name }}-
            ${{ runner.os }}-cargo-integration-
          
      - name: Update dependencies for testing
        run: |
          echo "üîß Updating ${{ inputs.repo_name }} dependencies to use branch ${{ inputs.branch_name }}"
          
          cd integration-tests
          
          # Create backup of original files
          cp Cargo.toml Cargo.toml.backup
          
          # Convert repo_url to full GitHub URL if needed
          if [[ "${{ inputs.repo_url }}" == *"github.com"* ]]; then
            REPO_URL="${{ inputs.repo_url }}"
          else
            REPO_URL="https://github.com/${{ inputs.repo_url }}"
          fi
          
          echo "üìç Using repository URL: $REPO_URL"
          echo "üåø Using branch: ${{ inputs.branch_name }}"
          
          # Show original dependencies
          echo "üìã Original dependencies for ${{ inputs.repo_name }}:"
          case "${{ inputs.repo_name }}" in
            "sv2-core-test")
              grep -E "(stratum-common|sv1_api|key-utils|config-helpers)" Cargo.toml || echo "No matching dependencies found"
              ;;
            "sv2-pool-apps-test")
              grep -E "(jd_server|pool_sv2)" Cargo.toml || echo "No matching dependencies found"
              ;;
            "sv2-miner-apps-test")
              grep -E "(jd_client|translator_sv2|mining_device)" Cargo.toml || echo "No matching dependencies found"
              ;;
          esac
          
          # Update dependencies based on the repository being tested
          case "${{ inputs.repo_name }}" in
            "sv2-core-test")
              echo "üîÑ Updating sv2-core-test dependencies to use local paths..."
              
              # Verify the directory structure exists
              SV2_CORE_DIR="../repo-under-test"
              if [ ! -d "$SV2_CORE_DIR/common" ] || [ ! -d "$SV2_CORE_DIR/sv1" ] || [ ! -d "$SV2_CORE_DIR/sv2" ]; then
                echo "‚ùå Expected sv2-core-test directory structure not found at $SV2_CORE_DIR"
                echo "üìÅ Available directories:"
                ls -la $SV2_CORE_DIR/
                exit 1
              fi
              
              echo "‚úÖ Found valid sv2-core-test structure at: $SV2_CORE_DIR"

              # Create .cargo/config.toml with all sv2-core-test dependencies used across the ecosystem
              mkdir -p .cargo
              {
                echo "# Patch configuration for testing with PR branch of sv2-core-test"
                echo "[patch.\"$REPO_URL\"]"
                echo "stratum-common = { path = \"$SV2_CORE_DIR/common\" }"
                echo "sv1_api = { path = \"$SV2_CORE_DIR/sv1\" }"
                echo "key-utils = { path = \"$SV2_CORE_DIR/utils/key-utils\" }"
                echo "config-helpers = { path = \"$SV2_CORE_DIR/roles-utils/config-helpers\" }"
                echo "buffer_sv2 = { path = \"$SV2_CORE_DIR/utils/buffer\" }"
                echo "error_handling = { path = \"$SV2_CORE_DIR/utils/error-handling\" }"
                echo "rpc_sv2 = { path = \"$SV2_CORE_DIR/roles-utils/rpc\" }"
              } > .cargo/config.toml

              # Also patch the direct dependencies in Cargo.toml
              sed -i "s|stratum-common = { git = \"https://github.com/GitGab19/sv2-core-test\", branch = \"main\"|stratum-common = { path = \"$SV2_CORE_DIR/common\"|g" Cargo.toml
              sed -i "s|sv1_api = { git = \"https://github.com/GitGab19/sv2-core-test\", branch = \"main\"|sv1_api = { path = \"$SV2_CORE_DIR/sv1\"|g" Cargo.toml  
              sed -i "s|key-utils = { git = \"https://github.com/GitGab19/sv2-core-test\", branch = \"main\"|key-utils = { path = \"$SV2_CORE_DIR/utils/key-utils\"|g" Cargo.toml
              sed -i "s|config-helpers = { git = \"https://github.com/GitGab19/sv2-core-test\", branch = \"main\"|config-helpers = { path = \"$SV2_CORE_DIR/roles-utils/config-helpers\"|g" Cargo.toml
              
              echo "‚úÖ Updated sv2-core-test dependencies to use local paths"
              ;;
              
            "sv2-pool-apps-test")
              echo "üîÑ Updating sv2-pool-apps-test dependencies..."
              
              # Verify the directory structure exists
              POOL_APPS_DIR="../repo-under-test"
              if [ ! -d "$POOL_APPS_DIR/pool" ] || [ ! -d "$POOL_APPS_DIR/jd-server" ]; then
                echo "‚ùå Expected sv2-pool-apps-test directory structure not found at $POOL_APPS_DIR"
                echo "üìÅ Available directories:"
                ls -la $POOL_APPS_DIR/
                exit 1
              fi
              
              echo "‚úÖ Found valid sv2-pool-apps-test structure at: $POOL_APPS_DIR"
              
              # Create .cargo/config.toml for pool apps
              mkdir -p .cargo
              {
                echo "# Patch configuration for testing with PR branch of sv2-pool-apps-test"
                echo "[patch.\"$REPO_URL\"]"
                echo "jd_server = { path = \"$POOL_APPS_DIR/jd-server\" }"
                echo "pool_sv2 = { path = \"$POOL_APPS_DIR/pool\" }"
              } > .cargo/config.toml

              # Update direct dependencies
              sed -i "s|jd_server = { git = \"https://github.com/GitGab19/sv2-pool-apps-test\", branch = \"main\"|jd_server = { path = \"$POOL_APPS_DIR/jd-server\"|g" Cargo.toml
              sed -i "s|pool_sv2 = { git = \"https://github.com/GitGab19/sv2-pool-apps-test\", branch = \"main\"|pool_sv2 = { path = \"$POOL_APPS_DIR/pool\"|g" Cargo.toml
              
              echo "‚úÖ Updated sv2-pool-apps-test dependencies to use local paths"
              ;;
              
            "sv2-miner-apps-test")
              echo "üîÑ Updating sv2-miner-apps-test dependencies..."
              
              # Verify the directory structure exists  
              MINER_APPS_DIR="../repo-under-test"
              if [ ! -d "$MINER_APPS_DIR/jd-client" ] || [ ! -d "$MINER_APPS_DIR/translator" ]; then
                echo "‚ùå Expected sv2-miner-apps-test directory structure not found at $MINER_APPS_DIR"
                echo "üìÅ Available directories:"
                ls -la $MINER_APPS_DIR/
                exit 1
              fi
              
              echo "‚úÖ Found valid sv2-miner-apps-test structure at: $MINER_APPS_DIR"
              
              # Create .cargo/config.toml for miner apps
              mkdir -p .cargo
              {
                echo "# Patch configuration for testing with PR branch of sv2-miner-apps-test"
                echo "[patch.\"$REPO_URL\"]"
                echo "jd_client = { path = \"$MINER_APPS_DIR/jd-client\" }"
                echo "translator_sv2 = { path = \"$MINER_APPS_DIR/translator\" }"
                echo "mining_device = { path = \"$MINER_APPS_DIR/test-utils/mining-device\" }"
                echo "mining_device_sv1 = { path = \"$MINER_APPS_DIR/test-utils/mining-device-sv1\" }"
              } > .cargo/config.toml

              # Update direct dependencies
              sed -i "s|jd_client = { git = \"https://github.com/GitGab19/sv2-miner-apps-test\", branch = \"main\"|jd_client = { path = \"$MINER_APPS_DIR/jd-client\"|g" Cargo.toml
              sed -i "s|translator_sv2 = { git = \"https://github.com/GitGab19/sv2-miner-apps-test\", branch = \"main\"|translator_sv2 = { path = \"$MINER_APPS_DIR/translator\"|g" Cargo.toml
              sed -i "s|mining_device = { git = \"https://github.com/GitGab19/sv2-miner-apps-test\", branch = \"main\"|mining_device = { path = \"$MINER_APPS_DIR/test-utils/mining-device\"|g" Cargo.toml
              sed -i "s|mining_device_sv1 = { git = \"https://github.com/GitGab19/sv2-miner-apps-test\", branch = \"main\"|mining_device_sv1 = { path = \"$MINER_APPS_DIR/test-utils/mining-device-sv1\"|g" Cargo.toml
              
              echo "‚úÖ Updated sv2-miner-apps-test dependencies to use local paths"
              ;;
              
            *)
              echo "‚ùå Unknown repository: ${{ inputs.repo_name }}"
              echo "üìã Supported repositories: sv2-core-test, sv2-pool-apps-test, sv2-miner-apps-test"
              exit 1
              ;;
          esac
          
          # Show the changes made
          echo "üìù Updated dependencies:"
          case "${{ inputs.repo_name }}" in
            "sv2-core-test")
              grep -E "(stratum-common|sv1_api|key-utils|config-helpers)" Cargo.toml || echo "No matching dependencies found"
              ;;
            "sv2-pool-apps-test")
              grep -E "(jd_server|pool_sv2)" Cargo.toml || echo "No matching dependencies found"
              ;;
            "sv2-miner-apps-test")
              grep -E "(jd_client|translator_sv2|mining_device)" Cargo.toml || echo "No matching dependencies found"
              ;;
          esac
          
          echo "üîß Created .cargo/config.toml:"
          cat .cargo/config.toml
          
      - name: Validate Rust project
        run: |
          cd integration-tests
          echo "üîç Validating Rust project setup..."
          
          # Check if Cargo.toml is valid
          cargo metadata --format-version 1 >/dev/null || {
            echo "‚ùå Invalid Cargo.toml after patching"
            exit 1
          }
          
          echo "‚úÖ Cargo.toml is valid"
          echo "üì¶ Project dependencies:"
          cargo tree --depth 1 || echo "Warning: Could not generate dependency tree"
          
      - name: Run integration tests
        run: |
          cd integration-tests
          
          echo "üß™ Running integration tests with updated dependencies..."
          echo "üìÇ Current working directory: $(pwd)"
          echo "üìã Test files available:"
          ls -la tests/
          
          # Run tests with appropriate features and timeout
          echo "üöÄ Starting cargo test with sv1 features..."
          
          # Set RUST_LOG for better debugging if tests fail
          export RUST_LOG=debug
          export RUST_BACKTRACE=1
          
          # Run the tests with a reasonable timeout per test
          timeout 30m cargo test --features sv1 --verbose --no-fail-fast -- --test-threads=1 --nocapture
          
          echo "‚úÖ Integration tests completed successfully!"
          
      - name: Cleanup and summary
        if: always()
        run: |
          echo "üßπ Cleaning up and providing summary..."
          
          cd integration-tests
          
          # Restore original files
          if [ -f Cargo.toml.backup ]; then
            echo "üìÅ Restoring original Cargo.toml..."
            mv Cargo.toml.backup Cargo.toml
          fi
          
          # Clean up .cargo directory
          if [ -d .cargo ]; then
            echo "üóëÔ∏è Removing .cargo/config.toml..."
            rm -rf .cargo
          fi
          
          echo "üìä Test Summary:"
          echo "üì¶ Repository tested: ${{ inputs.repo_name }}"
          echo "üåø Branch tested: ${{ inputs.branch_name }}"
          if [ -n "${{ inputs.pr_number }}" ]; then
            echo "üî¢ PR Number: #${{ inputs.pr_number }}"
          fi
          echo "‚è∞ Completed at: $(date)"
          echo "‚úÖ Integration tests workflow finished"