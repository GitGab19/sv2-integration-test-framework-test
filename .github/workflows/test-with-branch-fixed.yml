name: Integration Test with Custom Branch (Fixed)

on:
  workflow_call:
    inputs:
      repo_name:
        description: 'Repository name (sv2-core-test, sv2-pool-apps-test, or sv2-miner-apps-test)'
        required: true
        type: string
      branch_name:
        description: 'Branch name to test'
        required: true
        type: string
      repo_url:
        description: 'Repository URL (for handling forks)'
        required: true
        type: string
      repo_slug:
        description: 'Repository slug (e.g., GitGab19/sv2-core-test)'
        required: true
        type: string
      pr_number:
        description: 'PR number (optional, for better logging)'
        required: false
        type: string
        default: ''

jobs:
  integration-test:
    runs-on: ubuntu-latest
    timeout-minutes: 45
    
    steps:
      - name: üß™ Integration Test Setup - What are we testing?
        run: |
          echo "üß™ =============================================="
          echo "üß™ SV2 INTEGRATION TEST - TESTING PR CHANGES"
          echo "üß™ =============================================="
          echo ""
          echo "üéØ WHAT ARE WE TESTING?"
          echo "   Repository with changes: ${{ inputs.repo_name }}"
          echo "   Branch with PR changes:  ${{ inputs.branch_name }}"
          echo "   Source repository:       ${{ inputs.repo_url }}"
          if [ -n "${{ inputs.pr_number }}" ]; then
            echo "   PR Number:              #${{ inputs.pr_number }}"
          fi
          echo ""
          echo "üîç HOW THE TEST WORKS:"
          case "${{ inputs.repo_name }}" in
            "sv2-core-test")
              echo "   ‚Ä¢ Integration tests will use YOUR sv2-core-test changes"
              echo "   ‚Ä¢ Pool apps (jd-server, pool) will use stable main branch"
              echo "   ‚Ä¢ Miner apps (jd-client, translator) will use stable main branch"
              echo "   ‚Ä¢ This tests if your protocol changes break pool/miner apps"
              ;;
            "sv2-pool-apps-test")
              echo "   ‚Ä¢ Integration tests will use YOUR pool app changes"
              echo "   ‚Ä¢ Core protocols will use stable main branch"  
              echo "   ‚Ä¢ Miner apps will use stable main branch"
              echo "   ‚Ä¢ This tests if your pool changes work with stable protocols"
              ;;
            "sv2-miner-apps-test")
              echo "   ‚Ä¢ Integration tests will use YOUR miner app changes"
              echo "   ‚Ä¢ Core protocols will use stable main branch"
              echo "   ‚Ä¢ Pool apps will use stable main branch"  
              echo "   ‚Ä¢ This tests if your miner changes work with stable protocols"
              ;;
          esac
          echo ""
          echo "‚è∞ Test started at: $(date)"
          echo "üß™ =============================================="

      - name: Derive repo slug from URL
        id: derive_slug
        run: |
          REPO_URL="${{ inputs.repo_url }}"
          REPO_SLUG=$(echo "$REPO_URL" | sed -E 's#(https://github.com/|git@github.com:|.git$)##g')
          echo "slug=$REPO_SLUG" >> $GITHUB_OUTPUT
          echo "üìç Derived repository slug: $REPO_SLUG"

      - name: üì• Checkout YOUR repository with PR changes
        uses: actions/checkout@v4
        with:
          repository: ${{ steps.derive_slug.outputs.slug }}
          ref: ${{ inputs.branch_name }}
          path: pr-changes
          fetch-depth: 1
        
      - name: üìã Verify YOUR changes were checked out correctly
        run: |
          echo "‚úÖ Successfully checked out ${{ inputs.repo_name }} from your PR"
          echo "üìÅ Repository contents:"
          ls -la pr-changes/
          echo ""
          echo "üìÑ Git info for your changes:"
          cd pr-changes
          echo "Current branch: $(git branch --show-current || echo 'detached HEAD')"
          echo "Latest commit: $(git log --oneline -1)"
          echo "Repository: ${{ inputs.repo_name }}"
          echo "Branch: ${{ inputs.branch_name }}"
          
      - name: Checkout integration test framework
        uses: actions/checkout@v4
        with:
          repository: GitGab19/sv2-integration-test-framework-test
          path: integration-tests
          fetch-depth: 1
          
      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          override: true
          
      - name: Cache cargo registry and dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            integration-tests/target
          key: ${{ runner.os }}-cargo-integration-${{ inputs.repo_name }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-integration-${{ inputs.repo_name }}-
            ${{ runner.os }}-cargo-integration-
          
      - name: üîß Configure integration tests to use YOUR PR changes
        run: |
          echo "üîß =============================================="
          echo "üîß CONFIGURING INTEGRATION TESTS"
          echo "üîß =============================================="
          echo ""
          echo "üéØ Goal: Make integration tests use YOUR ${{ inputs.repo_name }} changes"
          echo "üìÇ Your PR code is in: pr-changes/"
          echo "üß™ Integration tests are in: integration-tests/"
          echo ""
          
          cd integration-tests
          
          # Backup original Cargo.toml
          cp Cargo.toml Cargo.toml.backup
          echo "üíæ Backed up original integration test configuration"
          
          # CRITICAL FIX: Create .cargo/config.toml to prevent workspace discovery conflicts
          mkdir -p .cargo
          {
            echo "# Prevent Cargo from discovering parent workspaces that could conflict"
            echo "[build]"
            echo "target-dir = \"target\""
          } > .cargo/config.toml
          echo "üõ°Ô∏è  Created workspace isolation config"

          # Set up directory paths based on repository being tested
          echo ""
          echo "üîÄ Setting up dependency redirects..."
          case "${{ inputs.repo_name }}" in
            "sv2-core-test")
              PR_CHANGES_DIR="../pr-changes"
              echo "üìã Testing sv2-core-test PR - will redirect ALL protocol crates to YOUR changes"
              
              # Verify YOUR PR changes have the expected structure
              if [ ! -d "$PR_CHANGES_DIR/common" ] || [ ! -d "$PR_CHANGES_DIR/sv1" ]; then
                echo "‚ùå Expected sv2-core-test structure not found in YOUR PR"
                echo "üìÅ Contents of your PR changes:"
                ls -la $PR_CHANGES_DIR/
                exit 1
              fi
              echo "‚úÖ Verified YOUR sv2-core-test PR has expected directory structure"
              
              # Redirect integration test dependencies to use YOUR PR changes
              echo "üîÄ Redirecting sv2-core-test dependencies to YOUR PR changes..."
              sed -i "s|stratum-common = { git = \"https://github.com/GitGab19/sv2-core-test\", branch = \"main\", features = \[\"with_network_helpers\", \"sv1\"\] }|stratum-common = { path = \"$PR_CHANGES_DIR/common\", features = [\"with_network_helpers\", \"sv1\"] }|g" Cargo.toml
              sed -i "s|sv1_api = { git = \"https://github.com/GitGab19/sv2-core-test\", branch = \"main\", optional = true }|sv1_api = { path = \"$PR_CHANGES_DIR/sv1\", optional = true }|g" Cargo.toml
              sed -i "s|key-utils = { git = \"https://github.com/GitGab19/sv2-core-test\", branch = \"main\" }|key-utils = { path = \"$PR_CHANGES_DIR/utils/key-utils\" }|g" Cargo.toml
              sed -i "s|config-helpers = { git = \"https://github.com/GitGab19/sv2-core-test\", branch = \"main\" }|config-helpers = { path = \"$PR_CHANGES_DIR/roles-utils/config-helpers\" }|g" Cargo.toml

               # Force ALL sv2-core-test crates to use YOUR PR changes
               echo "üéØ Adding comprehensive patch to force ALL sv2-core-test crates to use YOUR changes..."
               {
                 echo ""
                 echo "# INTEGRATION TEST OVERRIDE: Use PR changes for all sv2-core-test crates"
                 echo "[patch.\"https://github.com/GitGab19/sv2-core-test\"]"
                 echo "stratum-common = { path = \"$PR_CHANGES_DIR/common\" }"
                 echo "sv1_api = { path = \"$PR_CHANGES_DIR/sv1\" }"
                 echo "key-utils = { path = \"$PR_CHANGES_DIR/utils/key-utils\" }"
                 echo "config-helpers = { path = \"$PR_CHANGES_DIR/roles-utils/config-helpers\" }"
                 echo "roles_logic_sv2 = { path = \"$PR_CHANGES_DIR/sv2/roles-logic-sv2\" }"
                 echo "network_helpers_sv2 = { path = \"$PR_CHANGES_DIR/roles-utils/network-helpers\" }"
                 echo "binary_sv2 = { path = \"$PR_CHANGES_DIR/sv2/binary-sv2\" }"
                 echo "binary_codec_sv2 = { path = \"$PR_CHANGES_DIR/sv2/binary-sv2/codec\" }"
                 echo "derive_codec_sv2 = { path = \"$PR_CHANGES_DIR/sv2/binary-sv2/derive_codec\" }"
                 echo "noise_sv2 = { path = \"$PR_CHANGES_DIR/sv2/noise-sv2\" }"
                 echo "framing_sv2 = { path = \"$PR_CHANGES_DIR/sv2/framing-sv2\" }"
                 echo "codec_sv2 = { path = \"$PR_CHANGES_DIR/sv2/codec-sv2\" }"
                 echo "common_messages_sv2 = { path = \"$PR_CHANGES_DIR/sv2/subprotocols/common-messages\" }"
                 echo "template_distribution_sv2 = { path = \"$PR_CHANGES_DIR/sv2/subprotocols/template-distribution\" }"
                 echo "mining_sv2 = { path = \"$PR_CHANGES_DIR/sv2/subprotocols/mining\" }"
                 echo "job_declaration_sv2 = { path = \"$PR_CHANGES_DIR/sv2/subprotocols/job-declaration\" }"
                 echo "channels_sv2 = { path = \"$PR_CHANGES_DIR/sv2/channels-sv2\" }"
                 echo "parsers_sv2 = { path = \"$PR_CHANGES_DIR/sv2/parsers-sv2\" }"
                 echo "buffer_sv2 = { path = \"$PR_CHANGES_DIR/utils/buffer\" }"
                 echo "error_handling = { path = \"$PR_CHANGES_DIR/utils/error-handling\" }"
                 echo "rpc_sv2 = { path = \"$PR_CHANGES_DIR/roles-utils/rpc\" }"
               } >> Cargo.toml
               echo "‚úÖ All 21 sv2-core-test crates will now use YOUR PR changes"
              ;;
              
            "sv2-pool-apps-test")
              PR_CHANGES_DIR="../pr-changes"
              echo "üìã Testing sv2-pool-apps-test PR - will redirect pool apps to YOUR changes"
              
              # Verify YOUR PR changes have the expected structure
              if [ ! -d "$PR_CHANGES_DIR/pool" ] || [ ! -d "$PR_CHANGES_DIR/jd-server" ]; then
                echo "‚ùå Expected sv2-pool-apps-test structure not found in YOUR PR"
                echo "üìÅ Contents of your PR changes:"
                ls -la $PR_CHANGES_DIR/
                exit 1
              fi
              echo "‚úÖ Verified YOUR sv2-pool-apps-test PR has expected directory structure"
              
              # Redirect integration test dependencies to use YOUR PR changes
              echo "üîÄ Redirecting pool app dependencies to YOUR PR changes..."
              sed -i "s|jd_server = { git = \"https://github.com/GitGab19/sv2-pool-apps-test\", branch = \"main\" }|jd_server = { path = \"$PR_CHANGES_DIR/jd-server\" }|g" Cargo.toml
              sed -i "s|pool_sv2 = { git = \"https://github.com/GitGab19/sv2-pool-apps-test\", branch = \"main\" }|pool_sv2 = { path = \"$PR_CHANGES_DIR/pool\" }|g" Cargo.toml

               # Force pool app crates to use YOUR PR changes  
               echo "üéØ Adding patch to force pool app crates to use YOUR changes..."
               {
                 echo ""
                 echo "# INTEGRATION TEST OVERRIDE: Use PR changes for pool app crates"
                 echo "[patch.\"https://github.com/GitGab19/sv2-pool-apps-test\"]"
                 echo "jd_server = { path = \"$PR_CHANGES_DIR/jd-server\" }"
                 echo "pool_sv2 = { path = \"$PR_CHANGES_DIR/pool\" }"
               } >> Cargo.toml
               echo "‚úÖ Pool app crates will now use YOUR PR changes"
              ;;
              
            "sv2-miner-apps-test")
              PR_CHANGES_DIR="../pr-changes"
              echo "üìã Testing sv2-miner-apps-test PR - will redirect miner apps to YOUR changes"
              
              # Verify YOUR PR changes have the expected structure
              if [ ! -d "$PR_CHANGES_DIR/jd-client" ] || [ ! -d "$PR_CHANGES_DIR/translator" ]; then
                echo "‚ùå Expected sv2-miner-apps-test structure not found in YOUR PR"
                echo "üìÅ Contents of your PR changes:"
                ls -la $PR_CHANGES_DIR/
                exit 1
              fi
              echo "‚úÖ Verified YOUR sv2-miner-apps-test PR has expected directory structure"
              
              # Redirect integration test dependencies to use YOUR PR changes
              echo "üîÄ Redirecting miner app dependencies to YOUR PR changes..."
              sed -i "s|jd_client = { git = \"https://github.com/GitGab19/sv2-miner-apps-test\", branch = \"main\" }|jd_client = { path = \"$PR_CHANGES_DIR/jd-client\" }|g" Cargo.toml
              sed -i "s|translator_sv2 = { git = \"https://github.com/GitGab19/sv2-miner-apps-test\", branch = \"main\" }|translator_sv2 = { path = \"$PR_CHANGES_DIR/translator\" }|g" Cargo.toml
              sed -i "s|mining_device = { git = \"https://github.com/GitGab19/sv2-miner-apps-test\", branch = \"main\" }|mining_device = { path = \"$PR_CHANGES_DIR/test-utils/mining-device\" }|g" Cargo.toml
              sed -i "s|mining_device_sv1 = { git = \"https://github.com/GitGab19/sv2-miner-apps-test\", branch = \"main\" }|mining_device_sv1 = { path = \"$PR_CHANGES_DIR/test-utils/mining-device-sv1\" }|g" Cargo.toml

               # Force miner app crates to use YOUR PR changes
               echo "üéØ Adding patch to force miner app crates to use YOUR changes..."
               {
                 echo ""
                 echo "# INTEGRATION TEST OVERRIDE: Use PR changes for miner app crates"
                 echo "[patch.\"https://github.com/GitGab19/sv2-miner-apps-test\"]"
                 echo "jd_client = { path = \"$PR_CHANGES_DIR/jd-client\" }"
                 echo "translator_sv2 = { path = \"$PR_CHANGES_DIR/translator\" }"
                 echo "mining_device = { path = \"$PR_CHANGES_DIR/test-utils/mining-device\" }"
                 echo "mining_device_sv1 = { path = \"$PR_CHANGES_DIR/test-utils/mining-device-sv1\" }"
               } >> Cargo.toml
               echo "‚úÖ Miner app crates will now use YOUR PR changes"
              ;;
              
            *)
              echo "‚ùå Unknown repository: ${{ inputs.repo_name }}"
              exit 1
              ;;
          esac
          
          echo ""
          echo "üéâ =============================================="
          echo "üéâ CONFIGURATION COMPLETE!"
          echo "üéâ =============================================="
          echo "‚úÖ Integration tests are now configured to use YOUR PR changes"
          echo "üìã What happens next:"
          echo "   1. Cargo will build YOUR changes from pr-changes/"
          echo "   2. Integration tests will run using YOUR code"
          echo "   3. Any failures indicate YOUR changes break integration"
          echo ""
          echo "üìÑ Updated integration test configuration (last 15 lines):"
          tail -15 Cargo.toml
          
      - name: üîç Verify YOUR PR changes are being used
        run: |
          cd integration-tests
          echo "üîç =============================================="
          echo "üîç VERIFYING YOUR PR CHANGES ARE BEING USED"
          echo "üîç =============================================="
          echo "üìã Checking that integration tests will actually use YOUR code..."
          
          # Show the complete dependency configuration
          echo "üìã Complete Cargo.toml dependencies section:"
          grep -A 50 '^\[dependencies\]' Cargo.toml || echo "No dependencies section found"
          
          echo ""
          echo "üìã Complete patch sections:"
          grep -A 50 '^\[patch' Cargo.toml || echo "No patch sections found"
          
          echo ""
          echo "üîç Dependency resolution check using cargo tree..."
          
          # Show which specific paths/versions are being used for key crates
          case "${{ inputs.repo_name }}" in
            "sv2-core-test")
              echo "üß™ Verifying sv2-core-test crates are using PR paths:"
              cargo tree --features sv1 -e normal --prefix none | grep -E "(stratum-common|sv1_api|key-utils|config-helpers|roles_logic_sv2|network_helpers_sv2|binary_sv2|mining_sv2|job_declaration_sv2)" | head -20
              echo ""
              echo "üìÇ Expected path prefix: ../repo-under-test/"
              echo "‚úÖ If you see 'file://' URLs pointing to ../repo-under-test/, the PR code is being used!"
              ;;
              
            "sv2-pool-apps-test")
              echo "üß™ Verifying sv2-pool-apps-test crates are using PR paths:"
              cargo tree --features sv1 -e normal --prefix none | grep -E "(jd_server|pool_sv2)" | head -10
              echo ""
              echo "üß™ Verifying sv2-core-test crates are using stable main branch:"
              cargo tree --features sv1 -e normal --prefix none | grep -E "(stratum-common|sv1_api|key-utils)" | head -10
              echo ""
              echo "üìÇ Expected: pool apps from ../repo-under-test/, core from git main"
              ;;
              
            "sv2-miner-apps-test")
              echo "üß™ Verifying sv2-miner-apps-test crates are using PR paths:"
              cargo tree --features sv1 -e normal --prefix none | grep -E "(jd_client|translator_sv2|mining_device)" | head -10
              echo ""
              echo "üß™ Verifying sv2-core-test crates are using stable main branch:"
              cargo tree --features sv1 -e normal --prefix none | grep -E "(stratum-common|sv1_api|key-utils)" | head -10
              echo ""
              echo "üìÇ Expected: miner apps from ../repo-under-test/, core from git main"
              ;;
          esac
          
          echo ""
          echo "üîç Checking for any duplicate crate versions (should be minimal):"
          cargo tree --features sv1 --duplicates || echo "No duplicate dependencies found"
          
          echo ""
          echo "üéØ Summary: The above output shows exactly which versions/paths are being used."
          echo "   - file:// URLs = local PR code ‚úÖ"
          echo "   - git URLs = remote repository code ‚úÖ" 
          echo "   - Duplicates = potential conflicts ‚ö†Ô∏è"
          
      - name: Generate detailed dependency report
        run: |
          cd integration-tests
          echo "üìä Generating comprehensive dependency verification report..."
          
          # Create a detailed report file
          REPORT_FILE="dependency-verification-report.txt"
          
          {
            echo "=============================================="
            echo "SV2 Integration Test Dependency Report"
            echo "=============================================="
            echo "Repository being tested: ${{ inputs.repo_name }}"
            echo "Branch: ${{ inputs.branch_name }}"
            echo "Generated at: $(date)"
            echo ""
            
            echo "üîç VERIFICATION: Which code is actually being used?"
            echo ""
            
            echo "üìã Direct Dependencies in Cargo.toml:"
            echo "----------------------------------------------"
            grep -E "(stratum-common|sv1_api|key-utils|config-helpers|jd_server|pool_sv2|jd_client|translator_sv2|mining_device)" Cargo.toml || echo "No matching dependencies found"
            echo ""
            
            echo "üìã Patch Sections (Override Rules):"
            echo "----------------------------------------------"
            sed -n '/^\[patch/,/^$/p' Cargo.toml
            echo ""
            
            echo "üå≥ Resolved Dependency Tree (Key SV2 Crates):"
            echo "----------------------------------------------"
            echo "Legend: file:// = PR code, git:// = remote repo"
            echo ""
            
            # Show resolved paths for all SV2 crates
            cargo tree --features sv1 -e normal --format "{p} [{f}]" | grep -E "(stratum-common|sv1_api|key-utils|config-helpers|roles_logic_sv2|network_helpers_sv2|binary_sv2|binary_codec_sv2|derive_codec_sv2|noise_sv2|framing_sv2|codec_sv2|common_messages_sv2|template_distribution_sv2|mining_sv2|job_declaration_sv2|channels_sv2|parsers_sv2|buffer_sv2|error_handling|rpc_sv2|jd_server|pool_sv2|jd_client|translator_sv2|mining_device)" | sort | uniq
            echo ""
            
            echo "‚úÖ VALIDATION CHECKLIST:"
            echo "----------------------------------------------"
            
            case "${{ inputs.repo_name }}" in
              "sv2-core-test")
                echo "For sv2-core-test PR testing, we expect:"
                echo "‚Ä¢ All sv2-core-test crates should show 'file://' paths to ../repo-under-test/"
                echo "‚Ä¢ Pool and miner app crates should show 'git://' URLs to main branches"
                echo ""
                echo "üîç Checking sv2-core-test crates:"
                cargo tree --features sv1 -e normal --format "{p} [{f}]" | grep -E "(stratum-common|sv1_api|key-utils|config-helpers|roles_logic_sv2|network_helpers_sv2|binary_sv2)" | while read line; do
                  if echo "$line" | grep -q "file://"; then
                    echo "‚úÖ $line"
                  else
                    echo "‚ö†Ô∏è  $line (expected file://, got git://)"
                  fi
                done
                ;;
                
              "sv2-pool-apps-test")
                echo "For sv2-pool-apps-test PR testing, we expect:"
                echo "‚Ä¢ Pool app crates (jd_server, pool_sv2) should show 'file://' paths"
                echo "‚Ä¢ sv2-core-test crates should show 'git://' URLs to main branch"
                echo "‚Ä¢ Miner app crates should show 'git://' URLs to main branch"
                echo ""
                echo "üîç Checking pool app crates:"
                cargo tree --features sv1 -e normal --format "{p} [{f}]" | grep -E "(jd_server|pool_sv2)" | while read line; do
                  if echo "$line" | grep -q "file://"; then
                    echo "‚úÖ $line"
                  else
                    echo "‚ö†Ô∏è  $line (expected file://, got git://)"
                  fi
                done
                ;;
                
              "sv2-miner-apps-test")
                echo "For sv2-miner-apps-test PR testing, we expect:"
                echo "‚Ä¢ Miner app crates (jd_client, translator_sv2, mining_device*) should show 'file://' paths"
                echo "‚Ä¢ sv2-core-test crates should show 'git://' URLs to main branch"
                echo "‚Ä¢ Pool app crates should show 'git://' URLs to main branch"
                echo ""
                echo "üîç Checking miner app crates:"
                cargo tree --features sv1 -e normal --format "{p} [{f}]" | grep -E "(jd_client|translator_sv2|mining_device)" | while read line; do
                  if echo "$line" | grep -q "file://"; then
                    echo "‚úÖ $line"
                  else
                    echo "‚ö†Ô∏è  $line (expected file://, got git://)"
                  fi
                done
                ;;
            esac
            
            echo ""
            echo "üö® CONFLICT CHECK:"
            echo "----------------------------------------------"
            DUPLICATES=$(cargo tree --features sv1 --duplicates 2>/dev/null || echo "")
            if [ -n "$DUPLICATES" ]; then
              echo "‚ö†Ô∏è  Found duplicate dependencies (potential conflicts):"
              echo "$DUPLICATES"
            else
              echo "‚úÖ No duplicate dependencies found"
            fi
            
            echo ""
            echo "=============================================="
            echo "End of Report"
            echo "=============================================="
            
          } | tee "$REPORT_FILE"
          
          echo ""
          echo "üìÑ Complete dependency verification report saved to: $REPORT_FILE"
          echo "üîç Review this report to confirm PR dependencies are being used correctly!"
          
      - name: Summary - How to verify PR dependencies are used
        run: |
          echo "üéØ VERIFICATION GUIDE: How to confirm PR dependencies are being used"
          echo "=================================================================="
          echo ""
          echo "Look for these indicators in the logs above:"
          echo ""
          echo "‚úÖ SUCCESS INDICATORS:"
          echo "  ‚Ä¢ Dependencies show 'file://' paths pointing to ../repo-under-test/"
          echo "  ‚Ä¢ Patch sections show correct local path mappings"
          echo "  ‚Ä¢ No duplicate version conflicts"
          echo "  ‚Ä¢ Cargo tree shows expected sources for each crate type"
          echo ""
          echo "‚ùå FAILURE INDICATORS:"
          echo "  ‚Ä¢ Dependencies still show 'git://' URLs when they should be local"
          echo "  ‚Ä¢ Multiple versions of the same crate (duplicates)"
          echo "  ‚Ä¢ Missing patch sections"
          echo "  ‚Ä¢ Path resolution errors"
          echo ""
          echo "üìã WHAT SHOULD BE LOCAL (file://) vs REMOTE (git://):"
          
          case "${{ inputs.repo_name }}" in
            "sv2-core-test")
              echo "  üß™ Testing sv2-core-test PR:"
              echo "    LOCAL (file://):  All 21 sv2-core-test crates"
              echo "    REMOTE (git://):  jd_server, pool_sv2, jd_client, translator_sv2, mining_device*"
              ;;
            "sv2-pool-apps-test")
              echo "  üèä Testing sv2-pool-apps-test PR:"
              echo "    LOCAL (file://):  jd_server, pool_sv2"
              echo "    REMOTE (git://):  All sv2-core-test crates, miner app crates"
              ;;
            "sv2-miner-apps-test")
              echo "  ‚õèÔ∏è  Testing sv2-miner-apps-test PR:"
              echo "    LOCAL (file://):  jd_client, translator_sv2, mining_device, mining_device_sv1"
              echo "    REMOTE (git://):  All sv2-core-test crates, pool app crates"
              ;;
          esac
          
          echo ""
          echo "üîç If you see the expected LOCAL/REMOTE pattern above, the PR is being tested correctly!"
          echo "=================================================================="
          
      - name: üå≥ Show dependency tree for manual verification
        run: |
          cd integration-tests
          echo "üå≥ =============================================="
          echo "üå≥ DEPENDENCY TREE - MANUAL VERIFICATION"
          echo "üå≥ =============================================="
          echo ""
          echo "üìã This shows exactly which code is being used by pool/miner apps:"
          echo ""
          
          cargo tree --features sv1 | grep -E "(jd_server|pool_sv2|jd_client|translator_sv2|stratum-common|buffer_sv2|key-utils|config-helpers|error_handling)"
          
          echo ""
          echo "üîç WHAT TO LOOK FOR:"
          echo ""
          case "${{ inputs.repo_name }}" in
            "sv2-core-test")
              echo "‚úÖ EXPECTED - sv2-core-test crates should show LOCAL paths like:"
              echo "   stratum-common v3.0.0 (/github/workspace/pr-changes/common)"
              echo "   buffer_sv2 v2.0.0 (/github/workspace/pr-changes/utils/buffer)"
              echo ""
              echo "‚úÖ EXPECTED - pool/miner apps should show GIT URLs like:"
              echo "   jd_server v0.1.3 (https://github.com/GitGab19/sv2-pool-apps-test?branch=main)"
              echo "   jd_client v0.1.4 (https://github.com/GitGab19/sv2-miner-apps-test?branch=main)"
              ;;
            "sv2-pool-apps-test")
              echo "‚úÖ EXPECTED - pool apps should show LOCAL paths like:"
              echo "   jd_server v0.1.3 (/github/workspace/pr-changes/jd-server)"
              echo "   pool_sv2 v0.1.3 (/github/workspace/pr-changes/pool)"
              echo ""
              echo "‚úÖ EXPECTED - sv2-core crates should show GIT URLs like:"
              echo "   stratum-common v3.0.0 (git+https://github.com/GitGab19/sv2-core-test)"
              ;;
            "sv2-miner-apps-test")
              echo "‚úÖ EXPECTED - miner apps should show LOCAL paths like:"
              echo "   jd_client v0.1.4 (/github/workspace/pr-changes/jd-client)"
              echo "   translator_sv2 v1.0.0 (/github/workspace/pr-changes/translator)"
              echo ""
              echo "‚úÖ EXPECTED - sv2-core crates should show GIT URLs like:"
              echo "   stratum-common v3.0.0 (git+https://github.com/GitGab19/sv2-core-test)"
              ;;
          esac
          
          echo ""
          echo "üéØ If you see the expected pattern above, your PR changes are being tested correctly!"
          echo "üå≥ =============================================="
          
      - name: Run integration tests
        timeout-minutes: 30
        run: |
          cd integration-tests
          echo "üèÉ Running integration tests with updated dependencies..."
          
          # Show effective configuration
          echo "üìã Cargo configuration:"
          echo "‚îú‚îÄ‚îÄ Working directory: $(pwd)"
          echo "‚îú‚îÄ‚îÄ Target repository: ../repo-under-test"
          echo "‚îî‚îÄ‚îÄ Workspace isolation: .cargo/config.toml"
          
          # Run tests with verbose output
          cargo test --features sv1 --verbose
          
      - name: Cleanup
        if: always()
        run: |
          cd integration-tests
          echo "üßπ Restoring original configuration..."
          if [ -f Cargo.toml.backup ]; then
            mv Cargo.toml.backup Cargo.toml
            echo "‚úÖ Original Cargo.toml restored"
          fi
          if [ -d .cargo ]; then
            rm -rf .cargo
            echo "‚úÖ Cargo config cleaned up"
          fi
          echo "üéØ Test completed for ${{ inputs.repo_name }} branch ${{ inputs.branch_name }}" 